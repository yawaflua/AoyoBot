from disnake.ext import *
import disnake
from pathlib import Path 
from handlers import *
import json
from log import rootLogger

voiceChannelData = Path("tempFiles/voiceTempFile.json")
voiceChannelName = Path("tempFiles/voiceName.json")
class audioChannelAutomatization(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        rootLogger.info(f'–ú–æ–¥—É–ª—å {self.__class__.__name__} –≤–∫–ª—é—á–µ–Ω!')
    

    
    
    @bot.event
    async def on_voice_state_update(member, before, after):       
        if after.channel and after.channel != before.channel and after.channel.name in ['[+] –°–û–ó–î–ê–¢–¨', '[+]–°–û–ó–î–ê–¢–¨']:
            guild = bot.get_guild(member.guild.id)
            
            category = disnake.utils.get(guild.categories, id=after.channel.category.id)

            data = json.loads(voiceChannelName.read_text(encoding="utf-8"))
            
            if f"{member.id}" in data:
                channel = await guild.create_voice_channel(name=f'{data[f"{member.id}"]["chat_name"]}', category=category)
            else:
                channel = await guild.create_voice_channel(name=f'{member.name}`s voice channel', category=category)
            await member.edit(voice_channel=channel)
            data[f"{member.id}"]["channel_id"] = f"{channel.id}"
            voiceChannelName.write_text(json.dumps(data, indent=7), "utf-8", newline='\n')
            embeded = disnake.Embed(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É", description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {member.mention}\n –ö–∞–Ω–∞–ª: {after.channel.name}",timestamp=datetime.datetime.now(), color=0x00ff00)
            embed = disnake.Embed(title = '**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏**', 
                                description="""–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.
**–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É:** ‚úèÔ∏è
**–ó–∞–¥–∞—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã:**üë•
**–ó–∞–∫—Ä—ã—Ç—å/–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É:**üîí
**–°–∫—Ä—ã—Ç—å/–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É:**üëÄ
**–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª(—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞):** \"–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\"""", colour=disnake.Colour.from_rgb(47, 49, 54))
            buttons = disnake.ui.View()
            buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id='renamePrivateRoom', emoji='‚úè'))
            buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id='setUsersLimit', emoji='üë•'))
            buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id='closePrivateRoom', emoji=f'üîí'))
            buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id='hidePrivateRoom', emoji=f'üëÄ'))
            buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.secondary, custom_id='kickUser', label='–ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
            buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.danger, custom_id='deleteChannel', label='–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª'))
            buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.danger, custom_id='giveOwner', label='–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞–Ω–∞–ª'))
            buttons.add_item(disnake.ui.Button(style=disnake.ButtonStyle.success, custom_id='takeOwner', label='–ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞–Ω–∞–ª'))
            await bot.get_guild(member.guild.id).get_channel(channel.id).send(embed=embed, view=buttons)
            writeData = {
                    'chat_name': f'{after.channel.name}',
                    'channel_owner': f'{member.id}',
                    'chat_id': f'{after.channel.id}', 
                    }
            data = json.loads(voiceChannelData.read_text(encoding="utf-8"))
            data["voice_channels"][f'{after.channel.id}'] = writeData
            voiceChannelData.write_text(json.dumps(data, indent=7), encoding="utf-8", newline="\n")


        elif before.channel and after.channel != before.channel:
            embeded = disnake.Embed(title="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª.", description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {member.mention}\n –ö–∞–Ω–∞–ª: {before.channel.name}",timestamp=datetime.datetime.now(), color=disnake.Colour.from_rgb(186, 0, 6))
            guild = bot.get_guild(member.guild.id)
            data = json.loads(voiceChannelName.read_text(encoding="utf-8"))
            for item in data:
                if data[item]['channel_id'] == str(before.channel.id):
                    if before.channel.name == f'{member.name}`s voice channel' or before.channel.name == data[item]["chat_name"] and not len(before.channel.members):
                        try:
                            await before.channel.delete()
                        except Exception as e:
                            print(e)
        else: pass
        path = Path("guilds/guilds.json")
        data = json.loads(path.read_text(encoding="utf-8"))
        if data["guilds"][f"{member.guild.id}"]["logs"]:
            embeded.set_thumbnail(url=member.avatar)
            await bot.get_channel(data["guilds"][f"{member.guild.id}"]["logs"]).send(embed=embeded)
             
def setup(bot):
    bot.add_cog(audioChannelAutomatization(bot))